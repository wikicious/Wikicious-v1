window.SIDEBAR_ITEMS = {"fn":[["check_id","Confirms that a given pubkey is equivalent to the program ID"],["entry","The Anchor codegen exposes a programming model where a user defines a set of methods inside of a `#[program]` module in a way similar to writing RPC request handlers. The macro then generates a bunch of code wrapping these user defined methods into something that can be executed on Solana."],["id","Returns the program ID"]],"macro":[["account_seeds",""],["bank_seeds",""],["error_msg","Creates an Error with a particular message, using format!() style arguments"],["error_msg_typed","Creates an Error with a particular message, using format!() style arguments"],["group_seeds",""],["openbook_v2_market_seeds",""],["require_msg","Like anchor’s require!(), but with a customizable message"],["require_msg_typed","Like anchor’s require!(), but with a customizable message and type"],["serum_market_seeds",""],["zip",""]],"mod":[["accounts","An Anchor generated module, providing a set of structs mirroring the structs deriving `Accounts`, where each field is a `Pubkey`. This is useful for specifying accounts for a client."],["accounts_ix",""],["accounts_zerocopy",""],["address_lookup_table_program",""],["error",""],["events",""],["health",""],["i80f48",""],["instruction","An Anchor generated module containing the program’s set of instructions, where each method handler in the `#[program]` mod is associated with a struct defining the input arguments to the method. These should be used directly, when one wants to serialize Anchor instruction data, for example, when speciying instructions on a client."],["logs",""],["mango_v4",""],["program","Module representing the program."],["serum3_cpi",""],["state",""],["types",""],["util",""]],"static":[["ID","The static program ID"]],"struct":[["Mango",""]]};